{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import json\n",
    "\n",
    "from pts.dataset.repository import get_dataset\n",
    "from pts.dataset.utils import to_pandas\n",
    "\n",
    "from pts.model.deepar import DeepAREstimator\n",
    "from pts.modules.distribution_output import ImplicitQuantileOutput\n",
    "from pts import Trainer\n",
    "from pts.evaluation import make_evaluation_predictions, Evaluator"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "import torch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "dataset = get_dataset(\"m5\", regenerate=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Recommended prediction horizon: 28\n",
      "Frequency of the time series: D\n"
     ]
    }
   ],
   "source": [
    "print(f\"Recommended prediction horizon: {dataset.metadata.prediction_length}\")\n",
    "print(f\"Frequency of the time series: {dataset.metadata.freq}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [],
   "source": [
    "estimator = DeepAREstimator(\n",
    "    distr_output=ImplicitQuantileOutput(output_domain=\"Positive\"),\n",
    "    cell_type='GRU',\n",
    "    input_size=72,\n",
    "    num_cells=64,\n",
    "    num_layers=3,\n",
    "    dropout_rate=0.2,\n",
    "    use_feat_dynamic_real=True,\n",
    "    use_feat_static_cat=True,\n",
    "    cardinality=[int(cat_feat_info.cardinality) for cat_feat_info in dataset.metadata.feat_static_cat],\n",
    "    embedding_dimension = [4, 4, 4, 4, 16],\n",
    "    prediction_length=dataset.metadata.prediction_length,\n",
    "    context_length=dataset.metadata.prediction_length*2,\n",
    "    freq=dataset.metadata.freq,\n",
    "    scaling=True,\n",
    "    trainer=Trainer(device=device,\n",
    "                    epochs=20,\n",
    "                    learning_rate=1e-3,\n",
    "                    num_batches_per_epoch=120,\n",
    "                    batch_size=256,\n",
    "                    num_workers=8,\n",
    "                    pin_memory=True,\n",
    "                   )\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "119it [01:01,  1.94it/s, avg_epoch_loss=0.435, epoch=0]\n",
      "119it [00:56,  2.10it/s, avg_epoch_loss=0.366, epoch=1]\n",
      "119it [00:59,  2.01it/s, avg_epoch_loss=0.344, epoch=2]\n",
      "119it [00:57,  2.09it/s, avg_epoch_loss=0.339, epoch=3]\n",
      "119it [00:57,  2.08it/s, avg_epoch_loss=0.323, epoch=4]\n",
      "119it [00:56,  2.09it/s, avg_epoch_loss=0.339, epoch=5]\n",
      "119it [00:58,  2.04it/s, avg_epoch_loss=0.327, epoch=6]\n",
      "119it [00:56,  2.10it/s, avg_epoch_loss=0.327, epoch=7]\n",
      "119it [00:57,  2.06it/s, avg_epoch_loss=0.328, epoch=8]\n",
      "119it [00:58,  2.04it/s, avg_epoch_loss=0.331, epoch=9]\n",
      "119it [00:57,  2.08it/s, avg_epoch_loss=0.322, epoch=10]\n",
      "119it [00:59,  2.01it/s, avg_epoch_loss=0.319, epoch=11]\n",
      "119it [00:58,  2.05it/s, avg_epoch_loss=0.321, epoch=12]\n",
      "119it [00:58,  2.05it/s, avg_epoch_loss=0.319, epoch=13]\n",
      "119it [00:58,  2.02it/s, avg_epoch_loss=0.321, epoch=14]\n",
      "119it [00:55,  2.13it/s, avg_epoch_loss=0.326, epoch=15]\n",
      "119it [00:57,  2.09it/s, avg_epoch_loss=0.326, epoch=16]\n",
      "119it [00:59,  2.02it/s, avg_epoch_loss=0.324, epoch=17]\n",
      "119it [00:57,  2.07it/s, avg_epoch_loss=0.317, epoch=18]\n",
      "119it [00:58,  2.02it/s, avg_epoch_loss=0.32, epoch=19] \n"
     ]
    }
   ],
   "source": [
    "predictor = estimator.train(dataset.train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [],
   "source": [
    "forecast_it, ts_it = make_evaluation_predictions(\n",
    "    dataset=dataset.test,  # test dataset\n",
    "    predictor=predictor,  # predictor\n",
    "    num_samples=100,  # number of sample paths we want for evaluation\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "forecasts = list(forecast_it)\n",
    "tss = list(ts_it)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Running evaluation: 100%|██████████| 30490/30490 [00:01<00:00, 15362.84it/s]\n"
     ]
    }
   ],
   "source": [
    "evaluator = Evaluator()\n",
    "agg_metrics, item_metrics = evaluator(iter(tss), iter(forecasts), num_series=len(dataset.test))\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{\n",
      "    \"MSE\": 4.67881831019069,\n",
      "    \"abs_error\": 829715.0852242557,\n",
      "    \"abs_target_sum\": 1231764.0,\n",
      "    \"abs_target_mean\": 1.4428196598416543,\n",
      "    \"seasonal_error\": 1.12721783493784,\n",
      "    \"MASE\": 0.8981459708461484,\n",
      "    \"MAPE\": 0.32066903474970854,\n",
      "    \"sMAPE\": 1.607201008190784,\n",
      "    \"OWA\": NaN,\n",
      "    \"MSIS\": 8.020464013332395,\n",
      "    \"QuantileLoss[0.1]\": 228597.93391284882,\n",
      "    \"Coverage[0.1]\": 0.5465105655249968,\n",
      "    \"QuantileLoss[0.2]\": 427520.68589925097,\n",
      "    \"Coverage[0.2]\": 0.5526788642646276,\n",
      "    \"QuantileLoss[0.3]\": 596678.5831146002,\n",
      "    \"Coverage[0.3]\": 0.5641638944853101,\n",
      "    \"QuantileLoss[0.4]\": 733503.7435174085,\n",
      "    \"Coverage[0.4]\": 0.5829768542379278,\n",
      "    \"QuantileLoss[0.5]\": 829715.0852156124,\n",
      "    \"Coverage[0.5]\": 0.6140994705524139,\n",
      "    \"QuantileLoss[0.6]\": 881578.0619610748,\n",
      "    \"Coverage[0.6]\": 0.6517195333364716,\n",
      "    \"QuantileLoss[0.7]\": 872760.4227906723,\n",
      "    \"Coverage[0.7]\": 0.7082111230848716,\n",
      "    \"QuantileLoss[0.8]\": 783768.9510111441,\n",
      "    \"Coverage[0.8]\": 0.7846483624607741,\n",
      "    \"QuantileLoss[0.9]\": 573582.3997516176,\n",
      "    \"Coverage[0.9]\": 0.873871995502109,\n",
      "    \"RMSE\": 2.1630576298819895,\n",
      "    \"NRMSE\": 1.4991877987851783,\n",
      "    \"ND\": 0.6735990702961409,\n",
      "    \"wQuantileLoss[0.1]\": 0.18558582156391062,\n",
      "    \"wQuantileLoss[0.2]\": 0.3470800298590079,\n",
      "    \"wQuantileLoss[0.3]\": 0.48440982453992826,\n",
      "    \"wQuantileLoss[0.4]\": 0.5954904864222437,\n",
      "    \"wQuantileLoss[0.5]\": 0.6735990702891239,\n",
      "    \"wQuantileLoss[0.6]\": 0.7157037078215266,\n",
      "    \"wQuantileLoss[0.7]\": 0.7085451618903233,\n",
      "    \"wQuantileLoss[0.8]\": 0.6362979848502993,\n",
      "    \"wQuantileLoss[0.9]\": 0.4656593306441961,\n",
      "    \"mean_wQuantileLoss\": 0.5347079353200622,\n",
      "    \"MAE_Coverage\": 0.16242666083597068\n",
      "}\n"
     ]
    }
   ],
   "source": [
    "print(json.dumps(agg_metrics, indent=4))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "item_metrics.plot(x='MSIS', y='MASE', kind='scatter')\n",
    "plt.grid(which=\"both\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "pytorchts-experiment",
   "language": "python",
   "name": "pytorchts-experiment"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
